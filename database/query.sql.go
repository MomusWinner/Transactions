// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
insert into customers(firstName, lastName, email)
values ($1, $2, $3)
returning id
`

type CreateCustomerParams struct {
	Firstname string
	Lastname  string
	Email     string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, arg.Firstname, arg.Lastname, arg.Email)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrder = `-- name: CreateOrder :one
insert into orders (customerId, orderDate, totalAmount)
values ($1, $2, $3)
returning id
`

type CreateOrderParams struct {
	Customerid  int32
	Orderdate   time.Time
	Totalamount float64
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.Customerid, arg.Orderdate, arg.Totalamount)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrderItem = `-- name: CreateOrderItem :execresult
insert into orderitems (orderId, productId, quantity, subtotal) values ($1, $2, $3, $4)
`

type CreateOrderItemParams struct {
	Orderid   int32
	Productid int32
	Quantity  int32
	Subtotal  float64
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createOrderItem,
		arg.Orderid,
		arg.Productid,
		arg.Quantity,
		arg.Subtotal,
	)
}

const createProduct = `-- name: CreateProduct :one
insert into products (name, price)
values ($1, $2)
returning id
`

type CreateProductParams struct {
	Name  string
	Price float64
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Price)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const updateComusmerEmail = `-- name: UpdateComusmerEmail :exec
update customers set email = $1 where id = $2
`

type UpdateComusmerEmailParams struct {
	Email string
	ID    int32
}

func (q *Queries) UpdateComusmerEmail(ctx context.Context, arg UpdateComusmerEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateComusmerEmail, arg.Email, arg.ID)
	return err
}
